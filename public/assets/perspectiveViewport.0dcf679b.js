var P=Object.defineProperty;var g=(t,r,i)=>r in t?P(t,r,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[r]=i;var n=(t,r,i)=>(g(t,typeof r!="symbol"?r+"":r,i),i);import{b as u}from"./painterState.2081fc22.js";import{W as w,a as l,P as h}from"./camera.94126e27.js";class S{constructor(){n(this,"moveSpeed",2);n(this,"lookSpeed",2);n(this,"camera",new(w(l(h)))({fovy:Math.PI*.3,position:[0,0,5]}))}}function k(t,{lookSpeed:r,moveSpeed:i,position:p,rotationY:c,rotationX:m,fovy:d}={}){const e=new S;r&&(e.lookSpeed=r),i&&(e.moveSpeed=i),d&&(e.camera.fovy=d,e.camera.needsUpdateProjection=!0),p&&(e.camera.position=p,e.camera.needsUpdateView=!0),m&&(e.camera.rotationX=m,e.camera.updateRotationX()),c&&(e.camera.rotationY=c,e.camera.updateRotationY()),t.set("viewPort",e,{reset:{moveSpeed:!0,lookSpeed:!0}}),t.listen("viewPort",u.FRAME,({device:a,viewPort:o})=>{const v=a.tpf/1e3;o.camera.updatePosFromInput(o.moveSpeed*v,a.keys,a.pointer);const s=a.pointer,f={dragging:s.dragging,drag:{x:a.sizeMultiplier*s.drag.x/a.canvas.width,y:a.sizeMultiplier*s.drag.y/a.canvas.height}};o.camera.updateRotFromPointer(o.lookSpeed,f),o.camera.update()}),t.listen("viewPort",u.RESIZE,({device:a,viewPort:o})=>{o.camera.aspect=a.canvas.width/a.canvas.height,o.camera.needsUpdateProjection=!0})}export{k as i};
