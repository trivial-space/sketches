import{f as q,t as y,e as A}from"./painterState.2081fc22.js";import{c as C,n as D}from"./lines_2d.3b9663ff.js";import{s as E,n as G,a as z,m as L}from"./vectors.212c15dd.js";import{b as I}from"./curves.71ebbb82.js";import{a as S}from"./noise.095b1379.js";function Q({top:e,left:c,width:l,height:b,steps:n,offsetY:u,offsetX:r,curveHeight:f,heightFactorFunction:d=o=>o,strokePointCount:s=10}){const o=b/n,k=[c,e],w=[c+l,e+o/2],[j,Y]=k,[X,M]=w,x=Math.random()*20,B=Math.random()*20,t=a=>r*S(a,x),m=a=>u*S(a,B),_=q(y(a=>[i([j+t(a),Y+o*a+m(a)],[X+t(a+n),M+o*a+m(a+n)],!1,f,d,s),i([X+t(a+n),M+o*a+m(a+n)],[j+t(a+1),Y+o*(a+1)+m(a+1)],!0,f,d,s)],n)).concat([i([j+t(n),Y+o*n+m(n)],[X+t(n+n),M+o*n+m(n+n)],!1,f,d,s)]).flat(),v=C();for(const a of _)v.append(D(a),!0);return v}function i(e,c,l=!1,b,n,u){const r=E(c,e),f=G(l?[-r[1],r[0]]:[r[1],-r[0]]),d=z(L(n(Math.random())*b,f),z(e,L(.5,r))),s=1/u;return A(s,1,s).map(o=>I(e,d,c,o))}export{Q as m};
